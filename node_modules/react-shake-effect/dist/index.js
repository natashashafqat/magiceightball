(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "react", "react-dom", "velocity-react", "velocity-animate", "lodash"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("react"), require("react-dom"), require("velocity-react"), require("velocity-animate"), require("lodash"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.react, global.reactDom, global.velocityReact, global.velocityAnimate, global.lodash);
		global.index = mod.exports;
	}
})(this, function (exports, _react, _reactDom, _velocityReact, _velocityAnimate, _lodash) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _react2 = _interopRequireDefault(_react);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _lodash2 = _interopRequireDefault(_lodash);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}

		return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		}

		subClass.prototype = Object.create(superClass && superClass.prototype, {
			constructor: {
				value: subClass,
				enumerable: false,
				writable: true,
				configurable: true
			}
		});
		if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	//
	//*************************
	//*************************
	// Nonpublished Imports
	//
	function updateState(ScopeProxy, Parcel) {
		var existingState = ScopeProxy.state !== null ? _lodash2.default.cloneDeep(ScopeProxy.state) : {};
		var adjustedState = _lodash2.default.merge(existingState, _lodash2.default.cloneDeep(Parcel));
		//
		try {
			ScopeProxy.setState(adjustedState);
		} catch (event) {
			console.warn("::react-shake:problem::updateState:", event);
		}
	}
	function watch(Testfunction) {
		var watchCore = {
			"Match": function Match(Target, Complete, ExpireAt) {
				var intervalCount = 0;
				var maximumAttempts = ExpireAt !== undefined ? ExpireAt : 2000;
				//
				var watchInterval = setInterval(function () {
					if (Testfunction() === Target) {
						Complete();
						//
						clearInterval(watchInterval);
					}
					if (intervalCount >= maximumAttempts) {
						console.warn("react-shake.js::watch::exceeded watch limit timeout::action halted.");
						//
						clearInterval(watchInterval);
					}
					intervalCount++;
				}, 1);
				//
			}
		};
		//
		return watchCore;
	}
	//
	//*************************
	//*************************
	// Exports
	//

	var Shake = function (_Component) {
		_inherits(Shake, _Component);

		//*************************
		//*************************
		// Standard Methods
		//
		function Shake(props) {
			_classCallCheck(this, Shake);

			return _possibleConstructorReturn(this, (Shake.__proto__ || Object.getPrototypeOf(Shake)).call(this, props));
		}

		_createClass(Shake, [{
			key: "getChildContext",
			value: function getChildContext() {
				// empty
			}
		}, {
			key: "getInitialState",
			value: function getInitialState() {
				return {};
			}
		}, {
			key: "componentWillMount",
			value: function componentWillMount() {
				// empty
			}
		}, {
			key: "componentWillUnmount",
			value: function componentWillUnmount() {
				// empty
			}
		}, {
			key: "componentDidMount",
			value: function componentDidMount() {
				var scopeProxy = this;
				//
				updateState(scopeProxy, {
					"Ready": false,
					"Portal": {
						"Distort": {
							"Depth": this.props.Portal.Distort.Depth,
							"Perspective": this.props.Portal.Distort.Perspective
						},
						"Oscillate": {
							"Displace": this.props.Portal.Oscillate.Displace,
							"Friction": this.props.Portal.Oscillate.Friction,
							"Speed": this.props.Portal.Oscillate.Speed,
							"Duration": this.props.Portal.Oscillate.Duration,
							"Axis": this.props.Portal.Oscillate.Axis
						},
						"Velocity": {
							"Profile": {
								"runOnMount": false
							}
						}
					},
					"Report": {
						"Start": this.props.Report.Start,
						"Change": this.props.Report.Change,
						"Complete": this.props.Report.Complete,
						"Ready": this.props.Report.Ready
					}
				});
			}
		}, {
			key: "componentWillUpdate",
			value: function componentWillUpdate() {
				// empty
			}
		}, {
			key: "componentDidUpdate",
			value: function componentDidUpdate() {
				var scopeProxy = this;
				var stateNormalized = this.state !== null ? _lodash2.default.isMatch(this.state.Portal, this.props.Portal) : false;
				//
				window.requestAnimationFrame(function () {
					if (scopeProxy.state !== undefined && scopeProxy.state.Ready === false) {
						updateState(scopeProxy, {
							"Ready": true
						});
						scopeProxy.props.Report.Ready(scopeProxy.props.children);
					}
				});
			}
		}, {
			key: "render",
			value: function render() {
				var scopeProxy = this;
				var childId = this.props.children.props.id;
				var childElement = document.getElementById(childId);
				var shaketargetportalClassname = this.props.children.props.className;
				var portalPerspective = _lodash2.default.has(this, "state.Portal.Distort.Perspective") ? this.state.Portal.Distort.Perspective : null;
				var portalmorphProfile = _lodash2.default.has(this, "state.Portal.Velocity.Profile") ? this.state.Portal.Velocity.Profile : null;
				//
				var adjustedChildTransform = "translateX(0)".concat(" translateY(0)", " translateZ(0)", " rotateX(0)", " rotateY(0)", " rotateZ(0)");
				//
				var portalmorphStyle = {
					"display": "inline-block",
					"position": "absolute",
					"visibility": "0",
					"opacity": "0",
					"width": "0",
					"height": "0"
				};
				//
				var shaketargetportalStyle = {
					"margin": "0",
					"padding": "0",
					"perspective": portalPerspective,
					"transform-style": "preserve-3d",
					"border": "none",
					"background": "none",
					"background-attachment": "scroll",
					"background-blend-mode": "normal",
					"bakcground-clip": "border-box",
					"background-image": "none",
					"background-origin": "padding-box",
					"background-position": "0% 0%",
					"background-repeat": "repeat",
					"background-size": "auto",
					"background-color": "transparent"
				};
				//
				this.props.children.props.style = this.props.children.props.style !== undefined ? this.props.children.props.style : {};
				//
				Object.assign(this.props.children.props.style, {
					"top": "0",
					"bottom": "0",
					"left": "0",
					"right": "0",
					"width": "100%",
					"height": "100%",
					"margin": "0",
					"transform": adjustedChildTransform
				});
				return _react2.default.createElement(
					"div",
					{ id: "shaketarget-portal-container", ref: "shaketargetportal", className: shaketargetportalClassname, style: shaketargetportalStyle },
					this.props.children,
					_react2.default.createElement(
						_velocityReact.VelocityComponent,
						portalmorphProfile,
						_react2.default.createElement("div", { id: "portal-morph-container", ref: "portalmorph", style: portalmorphStyle })
					)
				);
			}
		}, {
			key: "setListeners",
			value: function setListeners() {
				var scopeProxy = this;
			}
		}, {
			key: "applyShake",
			value: function applyShake(shakeAxis) {
				var scopeProxy = this;
				var childId = this.props.children.props.id;
				var childElement = document.getElementById(childId);
				var shakeDisplace = this.props.Portal.Oscillate.Displace;
				var shakeFriction = parseFloat(this.props.Portal.Oscillate.Friction);
				var shakeFrequency = parseFloat(this.props.Portal.Oscillate.Speed);
				var shakeDuration = parseFloat(this.props.Portal.Oscillate.Duration);
				var distanceUnit = shakeDisplace.match(/([A-Z,a-z])\w+/g)[0];
				var shakeMotion = distanceUnit.toLowerCase() === "deg" ? "radial" : "linear";
				var shakeAmplitude = parseFloat(shakeDisplace) / 100 * 90 * Math.PI / 2;
				//
				var oscillateProfile = {
					"runOnMount": false,
					"easing": "linear",
					"duration": shakeDuration,
					"animation": {
						"opacity": "1"
					},
					"progress": function progress(elements, complete, remaining, start, tweenValue) {
						// http://velocityjs.org/
						// The value of tweenValue is being reported as null for
						// unknown reasons. In order to tween the rotation according
						// to the easing, the actual value of the opacity must be
						// used as it tweens from zero to one. Additionally, at the
						// completion of the tween, the value of the opacity is set
						// back to zero by Velocity.
						//
						var progressValue = elements[0].style.opacity > 0 ? elements[0].style.opacity : 0;
						var shakeTime = shakeDuration / 1000 * progressValue;
						var oscillateValue = shakeAmplitude * Math.sin(shakeTime * shakeFrequency * Math.PI * 2) / Math.exp(shakeTime * shakeFriction);
						//
						switch (shakeAxis.toLowerCase()) {
							case "x":
								var childTransform = shakeMotion === "radial" ? "rotateX(".concat(oscillateValue.toString(), distanceUnit, ")") : "translateX(".concat(oscillateValue.toString(), distanceUnit, ")");
								//
								break;
							case "y":
								var childTransform = shakeMotion === "radial" ? "rotateY(".concat(oscillateValue.toString(), distanceUnit, ")") : "translateY(".concat(oscillateValue.toString(), distanceUnit, ")");
								//
								break;
							case "z":
								var childTransform = shakeMotion === "radial" ? "rotateZ(".concat(oscillateValue.toString(), distanceUnit, ")") : "translateZ(".concat(oscillateValue.toString(), distanceUnit, ")");
								//
								break;
						}
						Object.assign(childElement.style, {
							"transform": childTransform
						});
						scopeProxy.props.Report.Change({
							"Child": childElement,
							"Oscillate": {
								"Displace": shakeDisplace,
								"Friction": shakeFriction,
								"Speed": shakeFrequency,
								"Duration": shakeDuration,
								"Value": oscillateValue
							},
							"Percent": complete * 100
						});
					},
					"complete": function complete(event) {
						var completeProfile = {
							"runOnMount": false,
							"easing": "linear",
							"duration": 0,
							"animation": {
								"opacity": 0
							},
							"progress": function progress(elements, complete, remaining, start, tweenValue) {
								// empty
							},
							"complete": function complete(event) {
								scopeProxy.props.Report.Complete({
									"Child": childElement,
									"Oscillate": {
										"Displace": shakeDisplace,
										"Friction": shakeFriction,
										"Speed": shakeFrequency,
										"Duration": shakeDuration,
										"Axis": shakeAxis.toLowerCase()
									}
								});
							}
						};
						//
						updateState(scopeProxy, {
							"Portal": {
								"Velocity": {
									"Profile": completeProfile
								}
							}
						});
					}
				};
				//
				this.props.Report.Start({
					"Child": childElement,
					"Oscillate": {
						"Displace": shakeDisplace,
						"Friction": shakeFriction,
						"Speed": shakeFrequency,
						"Duration": shakeDuration,
						"Axis": shakeAxis.toLowerCase()
					}
				});
				updateState(scopeProxy, {
					"Portal": {
						"Velocity": {
							"Profile": oscillateProfile
						}
					}
				});
			}
		}]);

		return Shake;
	}(_react.Component);

	Shake.contextTypes = {}
	// empty

	//
	;
	exports.default = Shake;
});